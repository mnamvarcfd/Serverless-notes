service: notes-api
frameworkVersion: '3'
configValidationMode: error

provider:
  name: aws
  runtime: nodejs16.x

  stage: ${opt:stage, "dev"}
  region: ca-central-1


functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref notesCogUserPool
      COGNITO_WEB_CLIENT_ID: !Ref notesCogUserPoolClient


  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLE: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn

    events:
      - http:
         path: notes
         method: post
         authorizer: authorizer


  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLE: "1"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes
          method: get
          authorizer:
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            identitySource: method.request.header.Authorization
            arn: !GetAtt notesCogUserPool.Arn
         

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLE: "1"
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
         path: notes/{id}
         method: delete
         authorizer: authorizer


  updatNote:
    handler: handler.updatNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLE: 1
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn

    events:
      - http:
         path: notes/{id}
         method: put
         authorizer: authorizer



plugins:
  - serverless-iam-roles-per-function

resources:
 Resources:
  ${file(resources.yml)}


